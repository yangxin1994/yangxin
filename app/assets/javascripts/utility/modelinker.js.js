// Generated by CoffeeScript 1.6.3
var Modelinker;

Modelinker = (function() {
  function Modelinker(data, klass) {
    var _this = this;
    if (data == null) {
      data = {};
    }
    if (klass == null) {
      klass = "modelinker";
    }
    this.queue = {};
    this.data = data;
    this.klass = "modelinker";
    $(document).on("change", "." + this.klass, function(event) {
      var $this;
      $this = $(event.target);
      if ($this.is("input") || $this.is("textarea")) {
        return _this.queue["" + ($this.data("mid"))] = $this.val();
      } else {
        return _this.queue["" + ($this.data("mid"))] = $this.html();
      }
    });
    this;
  }

  Modelinker.prototype.new_mid = function(prefix) {
    var mid;
    if (prefix == null) {
      prefix = null;
    }
    if (prefix) {
      mid = "" + prefix + "-";
    } else {
      mid = "";
    }
    mid += "" + (Math.random(Date.now).toString().replace('0.', ''));
    return mid;
  };

  Modelinker.prototype.add = function($this, data) {
    if (data == null) {
      data = null;
    }
    return $this.data("");
  };

  Modelinker.prototype.set_obj = function(linker, mid) {
    var i, l, last_linker, _i, _len, _name;
    linker = linker.split('.');
    last_linker = this.data;
    for (i = _i = 0, _len = linker.length; _i < _len; i = ++_i) {
      l = linker[i];
      last_linker[_name = "" + l] || (last_linker[_name] = {});
      if (i === linker.length - 1) {
        last_linker["" + l] = mid;
      } else {
        last_linker = last_linker["" + l];
      }
    }
    return this.data;
  };

  Modelinker.prototype.generate = function(options) {
    var end_tag, html_attr, k, v, _mid, _ref;
    if (options == null) {
      options = {};
    }
    options["class"] || (options["class"] = "");
    _mid = this.new_mid();
    options.id || (options.id = _mid);
    options.value || (options.value = void 0);
    options.prefix || (options.prefix = void 0);
    html_attr = "";
    _ref = options.html_attr;
    for (k in _ref) {
      v = _ref[k];
      html_attr += " " + k + "=\"" + v + "\"";
    }
    options.html || (options.html = "");
    end_tag = options.single ? "" : "</" + options.type + ">";
    if (options.type) {
      this.queue["" + _mid] = options.value;
      this.set_obj(options.linker, _mid);
      return "<" + options.type + " \n  id=\"" + options.id + "\" \n  class=\"" + this.klass + " " + options["class"] + "\"\n  data-mid=\"" + _mid + "\"\n  data-linker=\"" + options.linker + "\"" + html_attr + ">" + options.html + end_tag;
    } else {
      return "";
    }
  };

  Modelinker.prototype.get_obj = function(linker) {
    var k, v, _ret;
    if (linker == null) {
      linker = this.data;
    }
    if (typeof linker !== "object") {
      linker = this.data;
    }
    _ret = {};
    for (k in linker) {
      v = linker[k];
      if (typeof v === "string") {
        _ret["" + k] = this.queue["" + v];
      } else {
        _ret["" + k] = this.get_obj(v);
      }
    }
    return _ret;
  };

  Modelinker.prototype.get = function(linker) {
    var key, last_linker, _i, _len, _linker;
    if (linker == null) {
      linker = "";
    }
    _linker = linker.split('.');
    last_linker = this.data;
    for (_i = 0, _len = _linker.length; _i < _len; _i++) {
      key = _linker[_i];
      last_linker = last_linker["" + key];
    }
    if (typeof last_linker === "string") {
      return this.queue["" + last_linker];
    } else {
      return this.get_obj(last_linker);
    }
  };

  return Modelinker;

})();

window.Modelinker = Modelinker;
