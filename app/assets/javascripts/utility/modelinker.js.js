// Generated by CoffeeScript 1.6.3
var Modelinker;

Modelinker = (function() {
  function Modelinker(options) {
    var _this = this;
    if (options == null) {
      options = {};
    }
    options.klass || (options.klass = "modelinker");
    options.data || (options.data = {});
    options.changed || (options.changed = function(e) {
      return {
        e: e
      };
    });
    this.queue = {};
    this.callback_queue = {};
    this.data = options.data;
    this.klass = options.klass;
    $(document).on("change", "." + this.klass, function(event) {
      var $this;
      $this = $(event.target);
      options.changed($this);
      if ($this.is("input")) {
        if ($this.is("input:checkbox")) {
          return _this.queue["" + ($this.data("mid"))] = $this.prop("checked") ? $this.val() : "";
        } else {
          return _this.queue["" + ($this.data("mid"))] = $this.val();
        }
      } else if ($this.is("textarea")) {
        return _this.queue["" + ($this.data("mid"))] = $this.val();
      } else {
        return _this.queue["" + ($this.data("mid"))] = $this.html();
      }
    });
    this;
  }

  Modelinker.prototype.new_mid = function(prefix) {
    var mid;
    if (prefix == null) {
      prefix = null;
    }
    if (prefix) {
      mid = "" + prefix + "-";
    } else {
      mid = "";
    }
    mid += "" + (Math.random(Date.now).toString().replace('0.', ''));
    return mid;
  };

  Modelinker.prototype.add = function($this, data) {
    if (data == null) {
      data = null;
    }
    return $this.data("");
  };

  Modelinker.prototype.set_obj = function(linker, mid) {
    var i, l, last_linker, _i, _len, _name;
    linker = linker.split('.');
    last_linker = this.data;
    for (i = _i = 0, _len = linker.length; _i < _len; i = ++_i) {
      l = linker[i];
      last_linker[_name = "" + l] || (last_linker[_name] = {});
      if (i === linker.length - 1) {
        last_linker["" + l] = mid;
      } else {
        last_linker = last_linker["" + l];
      }
    }
    return this.data;
  };

  Modelinker.prototype.generate = function(options) {
    var end_tag, k, v, value_tag, _html_attr, _mid, _ref;
    if (options == null) {
      options = {};
    }
    options.klass || (options.klass = "");
    _mid = this.new_mid();
    options.id || (options.id = _mid);
    options.value || (options.value = void 0);
    options.prefix || (options.prefix = void 0);
    options.callback || (options.callback = function(ret) {
      return ret;
    });
    options.html || (options.html = "");
    _html_attr = "";
    _ref = options.html_attr;
    for (k in _ref) {
      v = _ref[k];
      _html_attr += " " + k + (v ? "=\"" + v + "\"" : '') + " ";
    }
    end_tag = options.single ? "" : "</" + options.type + ">";
    value_tag = "";
    if (options.type) {
      if (options.type === "input") {
        switch (options.html_attr.type) {
          case "text":
            value_tag = options.value ? " value=" + options.value + " " : "";
            if (options.value) {
              this.queue["" + _mid] = options.value;
            }
            break;
          case "checkbox":
            if (options.html_attr.checked !== void 0) {
              this.queue["" + _mid] = options.value;
            }
            value_tag = " value=" + options.value + " ";
            break;
          default:
            if (options.value) {
              this.queue["" + _mid] = options.value;
            }
        }
      } else {
        this.queue["" + _mid] = options.html;
      }
      this.callback_queue["" + _mid] = options.callback;
      this.set_obj(options.linker, _mid);
      return "<" + options.type + " \n  id=\"" + options.id + "\" \n  class=\"" + this.klass + " " + options.klass + "\"\n  data-mid=\"" + _mid + "\"\n  " + value_tag + "\n  data-linker=\"" + options.linker + "\"" + _html_attr + ">" + options.html + end_tag;
    } else {
      return "";
    }
  };

  Modelinker.prototype.get_obj = function(linker) {
    var k, v, _ret;
    if (linker == null) {
      linker = this.data;
    }
    if (typeof linker !== "object") {
      linker = this.data;
    }
    _ret = void 0;
    for (k in linker) {
      v = linker[k];
      if (k.split('_')[0] === "ary") {
        _ret || (_ret = []);
        if (typeof v === "string") {
          _ret.push(this.queue["" + v]);
          this.callback_queue["" + v](_ret);
        } else {
          _ret.push(this.get_obj(v));
        }
      } else {
        _ret || (_ret = {});
        if (typeof v === "string") {
          _ret["" + k] = this.queue["" + v];
          this.callback_queue["" + v](_ret);
        } else {
          _ret["" + k] = this.get_obj(v);
        }
      }
    }
    return _ret;
  };

  Modelinker.prototype.get = function(linker) {
    var key, last_linker, _i, _len, _linker;
    if (linker == null) {
      linker = "";
    }
    _linker = linker.split('.');
    last_linker = this.data;
    for (_i = 0, _len = _linker.length; _i < _len; _i++) {
      key = _linker[_i];
      last_linker = last_linker["" + key];
    }
    if (typeof last_linker === "string") {
      return this.queue["" + last_linker];
    } else {
      return this.get_obj(last_linker);
    }
  };

  return Modelinker;

})();

window.Modelinker = Modelinker;
