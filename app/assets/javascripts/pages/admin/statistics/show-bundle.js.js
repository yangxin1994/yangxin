// Generated by CoffeeScript 1.6.3
$(function() {
  var bar_chart, get_color, hidden_tips, highlight, map_chart, pie_chart, recolor, show_tips;
  get_color = function(d, samples) {
    var color, count;
    count = samples["" + d.id] ? samples["" + d.id].count.toNumber() : -1;
    if (count <= 0) {
      color = "#ccc";
    } else if (count < 10) {
      color = "#56429b";
    } else if (count < 100) {
      color = "#2f7fb8";
    } else if (count < 300) {
      color = "#61c09f";
    } else if (count < 500) {
      color = "#a7dd9e";
    } else if (count < 800) {
      color = "#e4f791";
    } else if (count < 1000) {
      color = "#f5fca4";
    } else if (count < 1500) {
      color = "#fddf84";
    } else if (count < 2000) {
      color = "#fba959";
    } else if (count < 5000) {
      color = "#f0623c";
    } else if (count < 1000) {
      color = "#cf3047";
    } else if (count >= 10000) {
      color = "#95003b";
    } else {
      color = "#ccc";
    }
    return "fill: " + color;
  };
  highlight = function(selection, color) {
    if (color == null) {
      color = '#fff';
    }
    return d3.select(selection).attr("data-fill", function() {
      return d3.select(selection).style("fill");
    }).style("fill", color);
  };
  recolor = function(selection) {
    return d3.select(selection).style("fill", function() {
      return d3.select(selection).attr("data-fill");
    });
  };
  show_tips = function(selection, d, samples) {
    var count, xPositon, yPositon;
    count = samples["" + d.id] ? samples["" + d.id].count.toNumber() : 0;
    xPositon = d3.mouse(selection)[0];
    yPositon = d3.mouse(selection)[1] + 30;
    d3.select("#tooltip").style("left", "" + xPositon + "px").style("top", "" + yPositon + "px").select("#area_value").text("" + d.properties.name + ": " + count);
    return d3.select("#tooltip").classed("hidden", false);
  };
  hidden_tips = function() {
    return d3.select("#tooltip").classed("hidden", true);
  };
  map_chart = function(samples) {
    var height, path, places, projection, provinces, svg, width;
    samples = gon.analyze_result["" + samples];
    width = 800;
    height = 548;
    projection = d3.geo.miller().scale(800);
    path = d3.geo.path().projection(projection);
    svg = d3.select("#canvas").insert("svg", "h2").attr("width", width).attr("height", height);
    provinces = svg.append("g").attr("id", "provinces");
    places = svg.append("g").attr("id", "places");
    return d3.json("/assets/pages/admin/statistics/cn-provinces.json", function(collection) {
      provinces.selectAll("path").data(collection.features).enter().append("path").attr("d", path).attr("class", function(d) {
        return "province p_" + d.id;
      }).attr("data-name", function(d) {
        return d.properties.name;
      }).attr("style", function(d) {
        return get_color(d, samples);
      }).on('mouseover', function(d) {
        highlight(this, "#f2f2f2");
        return show_tips(this, d, samples);
      }).on("mouseout", function() {
        recolor(this);
        return hidden_tips();
      });
      provinces.selectAll("d").append("title").text(function(d) {
        return d.properties.name;
      });
      return places.selectAll("path").data(collection.features).enter().append("text").attr("class", "place-label").attr("dy", ".35em").attr("transform", function(d) {
        return "translate(" + (path.centroid(d)) + ")";
      }).text(function(d) {
        return d.properties.name;
      });
    });
  };
  pie_chart = function(samples) {
    var arc, color, data, g, height, index, item, month_flag, pie, radius, str_max, str_min, svg, time_max, time_min, width, year_flag, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    samples = gon.analyze_result["" + samples];
    width = 700;
    height = 500;
    radius = Math.min(width, height) / 2;
    data = [];
    switch (gon.chart_type) {
      case 2:
      case 4:
        _ref = gon.analyze_requirement.segmentation;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          item = _ref[index];
          if (index === 0) {
            data.push({
              _key: "小于 " + item,
              _value: samples[index]
            });
            item = "" + item + " ~ " + gon.analyze_requirement.segmentation[index + 1];
          } else if (index === gon.analyze_requirement.segmentation.length - 1) {
            item = "大于 " + item;
          } else {
            item = "" + item + " ~ " + gon.analyze_requirement.segmentation[index + 1];
          }
          data.push({
            _key: item,
            _value: samples[index]
          });
        }
        break;
      case 3:
      case 5:
        _ref1 = gon.analyze_requirement.segmentation;
        for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
          item = _ref1[index];
          item = item * 1000;
          time_min = Date.create(item);
          time_max = Date.create(gon.analyze_requirement.segmentation[index + 1] * 1000);
          switch (gon.date_type) {
            case 0:
              str_min = time_min.format("{yyyy}年");
              str_max = time_max.format("{yyyy}年");
              break;
            case 1:
              str_min = time_min.format("{yyyy}年{Month}月");
              str_max = time_max.format("{yyyy}年{Month}月");
              break;
            case 2:
              year_flag = false;
              month_flag = false;
              str_min = time_min.format('short', 'ja');
              str_max = time_max.format('short', 'ja');
              if (time_min.getYear() === time_max.getYear()) {
                str_max = time_max.format("{Month}月{d}日");
                year_flag = true;
              }
              if (year_flag && time_min.getMonth() === time_max.getMonth()) {
                str_max = time_max.format("{d}日");
              }
          }
          if (index === 0) {
            data.push({
              _key: "早于 " + str_min,
              _value: samples[index]
            });
            item = "" + str_min + " ~ " + str_max;
          } else if (index === gon.analyze_requirement.segmentation.length - 1) {
            item = "晚于 " + str_min;
          } else {
            item = "" + str_min + " ~ " + str_max;
          }
          data.push({
            _key: item,
            _value: samples[index]
          });
        }
        break;
      case 1:
      case 7:
        _ref2 = gon.enum_array;
        for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
          item = _ref2[index];
          data.push({
            _key: item,
            _value: samples[index]
          });
        }
    }
    console.log(data);
    color = d3.scale.ordinal().range(["#f0623c", "#fba959", "#fddf84", "#f5fca4", "#e4f791", "a7dd9e", "61c09f", "2f7fb8"]);
    arc = d3.svg.arc().outerRadius(radius - 10).innerRadius(0);
    pie = d3.layout.pie().sort(null).value(function(d) {
      return d._value;
    });
    svg = d3.select("#canvas").insert("svg", "h2").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");
    g = svg.selectAll(".arc").data(pie(data)).enter().append("g").attr("class", "arc");
    g.append("path").attr("d", arc).style("fill", function(d) {
      return color(d.data._value);
    });
    g.selectAll("path").on("mouseover", function(d) {
      return highlight(this, "#f2f2f2");
    }).on("mouseout", function() {
      return recolor(this);
    });
    g.append("title").text(function(d) {
      return "" + d.data._key + "(" + d.data._value + ")";
    });
    return g.append("text").attr("transform", function(d) {
      return "translate(" + (arc.centroid(d)) + ")";
    }).attr("dy", ".35em").style("text-anchor", "middle").text(function(d) {
      return "" + d.data._key + "(" + d.data._value + ")";
    });
  };
  bar_chart = function(samples) {
    var height, k, sample, svg, v, width, _results;
    width = 100;
    height = 800;
    _results = gon.analyze_result["" + samples];
    sample = {};
    samples = (function() {
      var _results1;
      _results1 = [];
      for (k in _results) {
        v = _results[k];
        _results1.push(v.count);
      }
      return _results1;
    })();
    console.log(samples);
    svg = d3.select("#canvas_side").append("svg").attr("width", width).attr("height", height);
    return svg.selectAll("rect").data(samples).enter().append("rect").attr("y", function(d, i) {
      return i * 21;
    }).attr("x", 0).style("fill", "#fba959").style("stroke", "#ffffff").attr("width", 0).transition().duration(1500).attr("width", function(d, i) {
      return d / 40 + 1;
    }).attr("height", 20);
  };
  switch (gon.chart_type) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return pie_chart(querilayer.queries.samples || "registered_users");
    case 6:
      map_chart(querilayer.queries.samples || "registered_users");
      return bar_chart(querilayer.queries.samples || "registered_users");
  }
});
