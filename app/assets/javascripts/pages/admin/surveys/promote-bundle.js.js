// Generated by CoffeeScript 1.6.3
$(function() {
  var attr_type, render_attr;
  window.modelinker = new Modelinker({
    changed: function($this) {
      return $this.closest(".bs-docs-example").find(".btn-attr-save").removeClass("disabled").html("*保存");
    }
  });
  $('#myTab a').click(function(e) {
    e.preventDefault();
    return $(this).tab('show');
  });
  render_attr = function(smp_attr) {
    var i, input, item, max_date, min_date, _html_attr, _i, _len, _ref;
    switch (smp_attr.type) {
      case 0:
        input = modelinker.generate({
          type: "textarea",
          linker: "attr." + smp_attr._id,
          html: smp_attr.pmt_value,
          html_attr: {
            rows: "6",
            placeholder: "字符串类型:请填写需要过滤的内容."
          }
        });
        break;
      case 1:
      case 7:
        input = "";
        smp_attr.pmt_value || (smp_attr.pmt_value = []);
        _ref = smp_attr.enum_array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          item = _ref[i];
          _html_attr = {
            type: "checkbox"
          };
          if (smp_attr.pmt_value.indexOf(i.toString()) !== -1) {
            _html_attr.checked = '';
          }
          input += "<label class=\"checkbox inline\">\n" + (modelinker.generate({
            type: "input",
            linker: "attr." + smp_attr._id + ".ary_" + i,
            value: i.toString(),
            html_attr: _html_attr,
            html: item
          })) + "\n</label>";
        }
        break;
      case 2:
      case 4:
        smp_attr.pmt_value || (smp_attr.pmt_value = []);
        input = "<div class=\"controls controls-row\">\n" + (modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".ary_0",
          klass: "span2",
          value: smp_attr.pmt_value[0],
          html_attr: {
            type: "text",
            placeholder: "最小值"
          }
        })) + "\n" + (modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".ary_1",
          klass: "span2",
          value: smp_attr.pmt_value[1],
          html_attr: {
            type: "text",
            placeholder: "最大值"
          }
        })) + "\n<span class=\"help-inline\">\n  <a href=\"javascript:void(0);\"><i class=\"icon-plus-sign\"></i></a>\n  <a href=\"javascript:void(0);\"><i class=\"icon-minus-sign\"></i></a>\n</span>                 \n</div>";
        break;
      case 3:
      case 5:
        smp_attr.pmt_value || (smp_attr.pmt_value = []);
        min_date = Date.create(smp_attr.pmt_value[0] * 1000);
        max_date = Date.create(smp_attr.pmt_value[1] * 1000);
        input = "<div class=\"controls controls-row\">\n  " + (modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".min.ary_y",
          klass: "span2",
          value: min_date.getFullYear(),
          html_attr: {
            type: "text",
            placeholder: "年"
          },
          html: item
        })) + "\n  " + (smp_attr.date_type > 0 ? modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".min.ary_m",
          klass: "span1",
          value: min_date.getMonth() + 1,
          html_attr: {
            type: "text",
            placeholder: "月"
          },
          html: item
        }) : "") + "\n  " + (smp_attr.date_type > 1 ? modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".min.ary_d",
          klass: "span1",
          value: min_date.getDay(),
          html_attr: {
            type: "text",
            placeholder: "日"
          },
          html: item
        }) : "") + "\n  <span class=\"span1\">~</span>\n\n  " + (modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".max.ary_y",
          klass: "span2",
          value: max_date.getFullYear(),
          html_attr: {
            type: "text",
            placeholder: "年"
          },
          html: item
        })) + "\n  " + (smp_attr.date_type > 0 ? modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".max.ary_m",
          klass: "span1",
          value: max_date.getMonth() + 1,
          html_attr: {
            type: "text",
            placeholder: "月"
          },
          html: item
        }) : "") + "\n  " + (smp_attr.date_type > 1 ? modelinker.generate({
          type: "input",
          linker: "attr." + smp_attr._id + ".max.ary_d",
          klass: "span1",
          value: max_date.getDay(),
          html_attr: {
            type: "text",
            placeholder: "日"
          },
          html: item
        }) : "") + "\n  <span class=\"help-inline\">\n    <a href=\"javascript:void(0);\"><i class=\"icon-plus-sign\"></i></a>\n    <a href=\"javascript:void(0);\"><i class=\"icon-minus-sign\"></i></a>\n  </span>\n</div>        ";
        break;
      case 6:
        input = modelinker.generate({
          type: "select",
          linker: "attr." + smp_attr._id,
          value: smp_attr.pmt_value,
          klass: ".province-group",
          select_options: {
            安徽省: 340000,
            北京市: 110000,
            福建省: 350000,
            甘肃省: 620000,
            广东省: 440000,
            广西壮族自治区: 450000,
            贵州省: 520000,
            海南省: 460000,
            河北省: 130000,
            河南省: 410000,
            黑龙江省: 230000,
            湖北省: 420000,
            湖南省: 430000,
            吉林省: 220000,
            江苏省: 320000,
            江西省: 360000,
            辽宁省: 210000,
            内蒙古自治区: 150000,
            宁夏回族自治区: 640000,
            青海省: 630000,
            山东省: 370000,
            山西省: 140000,
            陕西省: 610000,
            上海市: 310000,
            四川省: 510000,
            天津市: 120000,
            西藏自: 540000,
            新疆维吾尔自治区: 650000,
            云南省: 530000,
            浙江省: 330000,
            重庆市: 500000
          }
        });
        break;
      default:
        input = "<div class=\"bs-docs-example\">\n  <textarea rows=\"6\" placeholder=\"我觉得还是重试吧!\"></textarea>\n</div>";
    }
    return "<div class=\"bs-docs-example\" \n     data-id=\"" + smp_attr._id + "\" \n     data-type=\"" + smp_attr.type + "\"\n     style=\"display:none\" >\n  <div class=\"row\">\n    <span class=\"span1\">\n    </span>  \n    <span class=\"span9\">\n      <p>\n        [" + (attr_type(smp_attr)) + "]" + smp_attr.name + "\n      </p>\n      " + input + "\n    </span>  \n    <span class=\"span2\">\n      <p>\n        <button class=\"btn btn-small btn-blocks btn-primary btn-attr-save\" type=\"button\">保存*</button>\n      </p>\n      <p>\n        <button class=\"btn btn-small btn-blocks btn-danger btn-attr-del\" type=\"button\">删除</button>\n      </p>\n      \n    </span>  \n  </div>\n</div>";
  };
  attr_type = function(smp_attr) {
    var get_type;
    get_type = function(_type) {
      switch (_type) {
        case 0:
          return "字符串";
        case 1:
          if (smp_attr.element_type === 1 || smp_attr.element_type === 7) {
            return "枚举";
          } else {
            return "枚举(" + (get_type(smp_attr.element_type)) + ")";
          }
          break;
        case 2:
          return "数值";
        case 3:
          return "日期";
        case 4:
          return "数值范围";
        case 5:
          return "日期范围";
        case 6:
          return "地址";
        case 7:
          if (smp_attr.element_type === 1 || smp_attr.element_type === 7) {
            return "数组";
          } else {
            return "数组(" + (get_type(smp_attr.element_type)) + ")";
          }
          break;
        default:
          return "";
      }
    };
    return get_type(smp_attr.type);
  };
  (function() {
    var pmt_attr, smp_attr, _i, _len, _ref, _results;
    $.ajax({
      method: "GET",
      url: "sample_attributes",
      async: false,
      data: {
        id: gon.id
      },
      success: function(ret) {
        var smp_attr, _i, _len, _ref, _results;
        if (ret.success) {
          window.gon.smp_attrs = {};
          _ref = ret.value;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            smp_attr = _ref[_i];
            _results.push(window.gon.smp_attrs["" + smp_attr._id] = smp_attr);
          }
          return _results;
        } else {
          return alert_msg.show('error', "系统繁忙请刷新页面 (╯‵□′)╯︵┻━┻");
        }
      },
      error: function() {
        return alert_msg.show('error', "系统繁忙请刷新页面 (╯‵□′)╯︵┻━┻");
      }
    });
    _ref = gon.pmt_attrs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pmt_attr = _ref[_i];
      if (smp_attr = gon.smp_attrs["" + pmt_attr.sample_attribute_id]) {
        smp_attr.pmt_value = pmt_attr.value;
        $("#attr-placeholder").before(render_attr(smp_attr));
        _results.push($("#attr-placeholder").prev().fadeIn(200));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  })();
  $("#attr_add_btn").click(function() {
    var $this;
    $this = $(this);
    return $.ajax({
      method: "GET",
      url: "sample_attributes",
      async: false,
      data: {
        id: gon.id
      },
      success: function(ret) {
        var btns_str, last_type, smp_attr, _i, _len, _ref, _results;
        if (ret.success) {
          btns_str = "<li><a href=\"#\">取消</a></li>";
          last_type = null;
          window.gon.smp_attrs = {};
          _ref = ret.value;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            smp_attr = _ref[_i];
            window.gon.smp_attrs["" + smp_attr._id] = smp_attr;
            if (smp_attr.type !== last_type) {
              btns_str += "<li class=\"divider\"></li>";
            }
            btns_str += "<li><a href=\"#\" data-attr_id=\"" + smp_attr._id + "\" class=\"\">[" + (attr_type(smp_attr)) + "]" + smp_attr.name + "</a></li>";
            $("#btn_panel").html(btns_str);
            _results.push(last_type = smp_attr.type);
          }
          return _results;
        } else {
          return alert_msg.show('error', "系统繁忙请稍后再试 (╯‵□′)╯︵┻━┻");
        }
      },
      error: function() {
        return alert_msg.show('error', "系统繁忙请稍后再试 (╯‵□′)╯︵┻━┻");
      }
    });
  });
  $(document).on('click', '#btn_panel a', function() {
    var $this, smp_attr;
    $this = $(this);
    smp_attr = gon.smp_attrs["" + ($this.data('attr_id'))];
    $("#attr-placeholder").before(render_attr(smp_attr));
    return $("#attr-placeholder").prev().fadeIn(500);
  });
  false;
  $(document).on('click', ".btn-attr-del", function() {
    var $this, $this_div;
    $this = $(this);
    $this_div = $this.closest('.bs-docs-example');
    return $.ajax({
      method: "DELETE",
      url: "remove_sample_attribute_for_promote",
      data: {
        sample_attribute_id: $this_div.data("id")
      },
      success: function(ret) {
        if (ret.success) {
          alert_msg.show('success', "删除成功!");
          return $this_div.fadeOut(500);
        } else {
          return alert_msg.show('error', "删除失败 (╯‵□′)╯︵┻━┻");
        }
      },
      error: function() {
        return alert_msg.show('error', "删除失败 (╯‵□′)╯︵┻━┻");
      }
    });
  });
  $(document).on('click', ".btn-attr-save", function() {
    var $this, $this_div, _max, _min, _value;
    $this = $(this);
    $this_div = $this.closest('.bs-docs-example');
    _value = modelinker.get("attr." + ($this_div.data("id")));
    switch ($this_div.data("type")) {
      case 1:
      case 7:
        _value = _value.filter(function(i) {
          return i !== null && i !== void 0 && i !== "";
        });
        break;
      case 2:
      case 4:
        _value;
        break;
      case 3:
      case 5:
        _min = _value.min.join('-');
        _max = _value.max.join('-');
        _value = [Date.parse(_min) / 1000, Date.parse(_max) / 1000];
        break;
      default:
        _value;
    }
    _value;
    if ($this.hasClass("disabled")) {

    } else {
      return $.ajax({
        method: "PUT",
        url: "update_sample_attribute_for_promote",
        data: {
          sample_attribute: {
            sample_attribute_id: $this_div.data("id"),
            value: _value
          }
        },
        success: function(ret) {
          if (ret.success) {
            $this.closest(".attr-group").remove();
            $this.html("已保存").addClass("disabled");
            return alert_msg.show('success', "保存成功!");
          } else {
            return alert_msg.show('error', "保存失败 (╯‵□′)╯︵┻━┻");
          }
        },
        error: function() {
          return alert_msg.show('error', "保存失败 (╯‵□′)╯︵┻━┻");
        }
      });
    }
  });
  $('.btn-ckb').click(function() {
    var $this, _ref, _ref1;
    $this = $(this);
    if ($this.hasClass('active')) {
      $("#" + ($this.data('toggle')) + "_promotable").val(false);
      return (_ref = $("." + ($this.data('toggle')) + "-info")) != null ? _ref.hide() : void 0;
    } else {
      $("#" + ($this.data('toggle')) + "_promotable").val(true);
      return (_ref1 = $("." + ($this.data('toggle')) + "-info")) != null ? _ref1.show() : void 0;
    }
  });
  $(document).on('click', '.attr-li', function() {
    var $this, _placeholder;
    $this = $(this);
    _placeholder = "";
    switch ($this.attr("href").split('_')[1].toNumber()) {
      case 0:
        _placeholder = "字符串:请直接输入要筛选的字符串内容";
        break;
      case 1:
        _placeholder = "";
        break;
      case 2:
      case 4:
        _placeholder = "数值类型:每行包含两个元素的数组，两个元素均为数字,用逗号分隔，分别代表日期范围的最小值和最大值";
        break;
      case 3:
      case 5:
        _placeholder = "日期类型:每行包含两个元素的数组，两个元素均为YYYY/MM/DD,用逗号分隔，分别代表日期范围的最小值和最大值";
        break;
      case 6:
        _placeholder = "枚举类型:每行代表一项枚举";
        break;
      case 7:
        _placeholder = "数组类型:每行代表数组内的一项";
    }
    return $("#attr-ipt-" + ($this.data('index'))).attr("placeholder", _placeholder);
  });
  $(document).on('click', '.dropselect a', function() {
    var $this;
    $this = $(this);
    return $this.parent().parent().next('input').val($this.attr('href').split('-')[1]);
  });
  $('.btn-ckb').each(function() {
    var $this, _ref;
    $this = $(this);
    if (!$this.hasClass('active')) {
      return (_ref = $("." + ($this.data('toggle')) + "-info")) != null ? _ref.hide() : void 0;
    }
  });
  $('#add_browser_extension_setting').click(function() {
    var $this, add_html, index;
    $this = $(this);
    index = $this.data('toggle') + 1;
    add_html = "<div class=\"control-group broswer_extension-info\">\n  <label class=\"control-label\" >浏览器插件详细设置:</label>\n  <div class=\"controls\">\n    <input type=\"text\" placeholder=\"在这里输入关键字\" id=\"weibo_text\" name=\"broswer_extension[broswer_extension_promote_setting][filters][" + index + "][key_words]\" />\n  </div>\n</div>\n<div class=\"control-group broswer_extension-info\">\n  <div class=\"controls\">\n    <input type=\"text\" placeholder=\"在这里输入网址\" id=\"weibo_text\" name=\"broswer_extension[broswer_extension_promote_setting][filters][" + index + "][url]\" />\n  </div>\n</div>";
    $this.data('toggle', index);
    return $this.parent().parent().parent().prepend(add_html);
  });
  return $('#add_agent_setting').click(function() {
    var $this, add_html, agent_list, index, type_html;
    $this = $(this);
    type_html = $("#type_select_0").html();
    index = $this.data('toggle') + 1;
    agent_list = $("#agent_select_0").html();
    add_html = "<div class=\"control-group agent-info\">\n  <label class=\"control-label\">奖励方案设置:</label>\n  <div class=\"controls\">\n    <div class=\"btn-group\">\n      <button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\">\n        奖励方案\n        <span class=\"caret\"></span>\n      </button>\n      <ul class=\"dropdown-menu dropselect agent-reward\">\n        " + type_html + "\n      </ul>\n      <input type=\"hidden\" name=\"agent[agent_promote_setting][agents][" + index + "][reward_scheme_id]\"/>\n    </div>\n  </div>\n</div>    \n<div class=\"control-group agent-info\">\n  <label class=\"control-label\">代理选择:</label>\n  <div class=\"controls\">\n    <div class=\"btn-group\">\n      <button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\">\n        代理选择\n        <span class=\"caret\"></span>\n      </button>\n      <ul class=\"dropdown-menu dropselect\" id=\"agent_select_" + index + "\">\n        " + agent_list + "\n      </ul>\n      <input type='hidden' name=\"agent[agent_promote_setting][agents][" + index + "][agent_id]\" palceholder=\"\"/>\n    </div>\n  </div>\n</div>\n<div class=\"control-group agent-info\">\n  <label class=\"control-label\">回收数量:</label>\n  <div class=\"controls\">\n    <input type='text' name=\"agent[agent_promote_setting][agents][" + index + "][count]\" palceholder=\"\"/>\n  </div>\n</div>   \n<div class=\"control-group agent-info\">\n  <label class=\"control-label\">描述:</label>\n  <div class=\"controls\">\n    <textarea name=\"agent[agent_promote_setting][agents][" + index + "][description]\" rows =\"5\">\n    </textarea>        \n  </div>\n</div>";
    $this.data('toggle', index);
    return $this.parent().parent().parent().prepend(add_html);
  });
});
