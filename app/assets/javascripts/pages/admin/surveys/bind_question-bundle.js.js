// Generated by CoffeeScript 1.6.3
$(function() {
  var attr, current_attr, generate_relation, mapped_type, panel_class, relation, render_mapper, tmpl, tmpl_prefix, to_panel_class, type;
  to_panel_class = function(name) {
    return name.replace(/_/g, '-') + '-panel';
  };
  $('body').on('change', '[name=loc_precision]', function() {
    var self;
    self = this;
    return $(this).closest('.panel').find('.address-content').each(function() {
      return $(this).html($.od.odAddressSelector({
        precision: +$(self).val(),
        has_postcode: false
      }));
    });
  });
  tmpl_prefix = 'pages/admin/templates/';
  render_mapper = {
    1: 'enum',
    4: 'num_range',
    5: 'date_range',
    6: 'address',
    7: 'enum'
  };
  current_attr = null;
  type = null;
  $('[name=type]').change(function() {
    var attr, tmpl, value;
    value = $(this).val();
    current_attr = attr = $.grep(attrs, function(a) {
      return a._id === value;
    })[0];
    console.log(attr.enum_array);
    type = current_attr.type;
    if (render_mapper[type] && question['question_type'] === 0) {
      tmpl = "" + tmpl_prefix + render_mapper[type];
      $('.panel-wrapper').html(HandlebarsTemplates[tmpl]({
        question: question,
        attr: attr
      }));
      if (type === 5) {
        return setTimeout(function() {
          return $('.date-range-panel .date-selector-content').each(function() {
            return $.od.odTimeSelector({
              format: attr.date_type
            }).appendTo(this);
          });
        }, 0);
      } else if (type === 6) {
        return setTimeout(function() {
          return $('.address-panel .address-content').each(function() {
            return $.od.odAddressSelector({
              precision: 0,
              has_postcode: false
            }).appendTo(this);
          });
        }, 0);
      }
    } else {
      return $('.panel-wrapper').empty();
    }
  });
  if (question.sample_attribute_id) {
    current_attr = attr = $.grep(attrs, function(a) {
      return a._id === question.sample_attribute_id;
    })[0];
    type = current_attr.type;
    $('[name=type]').val(question.sample_attribute_id).change();
    mapped_type = render_mapper[type];
    if (mapped_type && question['question_type'] === 0) {
      tmpl = "" + tmpl_prefix + render_mapper[type];
      $('.panel-wrapper').html(HandlebarsTemplates[tmpl]({
        question: question,
        attr: attr
      }));
      relation = question.sample_attribute_relation;
      panel_class = to_panel_class(mapped_type);
      if (mapped_type === 'date_range') {
        setTimeout(function() {
          return $("." + panel_class + " table tbody tr").each(function() {
            var $this, item_id;
            $this = $(this);
            item_id = $this.find('[data-id]').data('id');
            $this.find('.first .od-time-selector').odTimeSelector('val', relation[item_id][0]);
            return $this.find('.second .od-time-selector').odTimeSelector('val', relation[item_id][1]);
          });
        }, 0);
      } else if (type === 6) {
        setTimeout(function() {
          return $('[name=loc_precision]').val(addr_precision).change();
        }, 0);
        setTimeout(function() {
          return $("." + panel_class + " table tbody tr").each(function() {
            var $this, item_id;
            $this = $(this);
            item_id = $this.find('[data-id]').data('id');
            return $this.find('.address-slt').odAddressSelector('val', {
              address: relation[item_id]
            });
          });
        }, 50);
      } else if (render_mapper[type] === 'enum') {
        setTimeout(function() {
          return $("." + panel_class + " table tbody tr").each(function() {
            var $this, item_id;
            $this = $(this);
            item_id = $this.find('[data-id]').data('id');
            return $this.find('select').val(relation[item_id]);
          });
        });
      } else if (mapped_type === 'num_range') {
        setTimeout(function() {
          return $("." + panel_class + " table tbody tr").each(function() {
            var $this, item_id;
            $this = $(this);
            item_id = $this.find('[data-id]').data('id');
            $this.find('.range-input.first').val(relation[item_id][0]);
            return $this.find('.range-input.second').val(relation[item_id][1]);
          });
        });
      }
    } else {
      $('.panel-wrapper').empty();
    }
  }
  generate_relation = function(name) {
    var mapper;
    panel_class = to_panel_class(name);
    relation = {};
    mapper = {
      'enum': function(panel_class) {
        $("." + panel_class + " table tbody tr").each(function() {
          var $this, item_id, val;
          $this = $(this);
          item_id = $this.find('[data-id]').data('id');
          val = $this.find('select').val();
          if (val.length > 0) {
            return relation[item_id] = val;
          }
        });
        return relation;
      },
      'num_range': function(panel_class) {
        $("." + panel_class + " table tbody tr").each(function() {
          var $this, first, item_id, second;
          $this = $(this);
          item_id = $this.find('[data-id]').data('id');
          first = $this.find('.range-input.first').val();
          second = $this.find('.range-input.second').val();
          return relation[item_id] = [first !== "" ? first : void 0, second !== "" ? second : void 0];
        });
        return relation;
      },
      'date_range': function(panel_class) {
        $("." + panel_class + " table tbody tr").each(function() {
          var $this, first, item_id, second;
          $this = $(this);
          item_id = $this.find('[data-id]').data('id');
          if ($this.find('.ts-year select:first').val().toString() === "-1") {
            first = null;
          } else {
            first = $this.find('.first .od-time-selector').odTimeSelector('val');
          }
          if ($this.find('.ts-year select:last').val().toString() === "-1") {
            second = null;
          } else {
            second = $this.find('.second .od-time-selector').odTimeSelector('val');
          }
          return relation[item_id] = [first, second];
        });
        return relation;
      },
      'address': function(panel_class) {
        $("." + panel_class + " table tbody tr").each(function() {
          var $this, item_id, val;
          $this = $(this);
          item_id = $this.find('[data-id]').data('id');
          val = $this.find('.address-slt').odAddressSelector('val')['address'];
          if (val.length > 0) {
            return relation[item_id] = val;
          }
        });
        return relation;
      }
    };
    return mapper[name](panel_class);
  };
  return $('#submit_bind').click(function() {
    console.log(current_attr);
    if (!current_attr) {
      return submit_bind;
    }
    type = current_attr.type;
    relation = {};
    if (render_mapper[type] && question['question_type'] === 0) {
      relation = generate_relation(render_mapper[type]);
    }
    console.log(relation);
    $.put(location.href, {
      attribute_id: current_attr['_id'],
      relation: JSON.stringify(relation)
    }, function() {
      return location.reload();
    });
    return false;
  });
});
