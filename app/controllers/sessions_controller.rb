# encoding: utf-8
require 'encryption'
require 'error_enum'
class SessionsController < ApplicationController

	before_filter :require_sign_out, :except => [:destroy]

	# method: get
	# descryption: the page where user logins
	def index
	end

	#*descryption*: user submits the login form
	#
	#*http* *method*: post
	#
	#*url*: /sessions
	#
	#*params*:
	#* user: the user hash, the keys of which include:
	#  - email
	#  - password
	#
	#*retval*:
	#* true if successfully login
	#* EMAIL_NOT_EXIST
	#* EMAIL_NOT_ACTIVATED
	#* WRONG_PASSWORD
	def create
		login = User.login(params[:user]["email"], params[:user]["password"], @client_ip)
		case login
		when ErrorEnum::EMAIL_NOT_EXIST
			flash[:error] = "帐号不存在!"
			respond_to do |format|
				format.html	{ redirect_to sessions_path and return }
				format.json	{ render :json => ErrorEnum::EMAIL_NOT_EXIST and return }
			end
		when ErrorEnum::EMAIL_NOT_ACTIVATED
			flash[:error] = "您的帐号未激活，请您首先激活帐号"
			respond_to do |format|
				format.html	{ redirect_to intput_activate_email_path and return }
				format.json	{ render :json => ErrorEnum::EMAIL_NOT_ACTIVATED and return }
			end
		when ErrorEnum::WRONG_PASSWORD
			flash[:error] = "密码错误"
			respond_to do |format|
				format.html	{ redirect_to sessions_path and return }
				format.json	{ render :json => ErrorEnum::WRONG_PASSWORD and return }
			end
		else
			set_login_session(params[:user]["email"])
			flash[:notice] = "已登录"
			respond_to do |format|
				format.html	{ redirect_to home_path and return }
				format.json	{ render :json => true and return }
			end
		end
	end

	#*descryption*: sign out
	#
	#*http* *method*: delete
	#
	#*url*: /sessions
	#
	#*params*:
	#
	#*retval*:
	#* true if successfully logout
	def destroy
		# clear cookie
		set_session(:current_user_email, nil) 
		set_session(:auth_key, nil) 
		# redirect to the welcome page
		respond_to do |format|
			format.html	{ redirect_to root_path and return }
			format.json	{ render :json => true and return }
		end
	end

	# method: get
	# descryption: the page where user inputs the email to reset password
	def forget_password
	end

	#*descryption*: send email to reset password
	#
	#*http* *method*: post
	#
	#*url*: /send_password_email
	#
	#*params*:
	#* user: a hash that has following keys
	#  - email
	#
	#*retval*:
	#* true if successfully send out
	#* ErrorEnum ::EMAIL_NOT_EXIST
	def send_password_email
		if User.user_exist?(params[:user]["email"]) == false
			flash[:notice] = "该邮箱未注册，请您注册"
			respond_to do |format|
				format.html { redirect_to registrations_path and return }
				format.json { render :json => ErrorEnum::EMAIL_NOT_EXIST and return }
			end
		end

		user = User.find_by_email(params[:user]["email"])
		# send password email
		UserMailer.password_email(user).deliver

		flash[:notice] = "重置密码邮件已发送，请到您的邮箱中点击链接进行密码重置"
		respond_to do |format|
			format.html { redirect_to sessions_path and return }
			format.json { render :json => true and return }
		end
	end

	#*descryption*: user clicks the reset password link
	#
	#*http* *method*: get
	#
	#*url*: /input_new_password
	#
	#*params*:
	#* password_key
	#
	#*retval*:
	#* redirect to forget_password_url if successfully pass the checking
	#* redirect to /500 if it is a wrong link
	def input_new_password
		password_info_json = Encryption.decrypt_activate_key(params[:password_key])
		password_info = JSON.parse(password_info_json)
		if Time.now.to_i - password_info["time"].to_i > OOPSDATA[RailsEnv.get_rails_env]["password_expiration_time"].to_i
			flash[:notice] = "密码重置链接已经过期，请重新发送重置密码链接"
			redirect_to forget_password_url and return
		end
		@email = password_info["email"]
		if User.user_exist?(@email) == false
			redirect_to "/500" and return			# wrong email (link is not generated by our website)
		end
	end

	# method: post
	#*descryption*: user submits the new password
	#
	#*http* *method*: post
	#
	#*url*: /new_password
	#
	#*params*:
	#* user: a hash that has the following keys
	#  - email
	#  - password
	#
	#*retval*:
	#* true if password is reset
	#* ErrorEnum::EMAIL_NOT_EXIST
	def new_password
		reset_password_retval = User.reset_password(params[:user]["email"], params[:user]["password"])
		case reset_password_retval
		when ErrorEnum::EMAIL_NOT_EXIST
			respond_to do |format|
				format.html { redirect_to "/500" and return }		# email account does not exist
				format.json { render :json => ErrorEnum::EMAIL_NOT_EXIST }		# email account does not exist
			end
		else
			flash[:notice] = "密码已重置"
			respond_to do |format|
				format.html { redirect_to sessions_path and return }
				format.json { render :json => true }
			end
			
		end
	end

	private

	# method: in-accessible
	# description: help set session for an email account
	def set_login_session(email)
		set_session(:current_user_email, params[:user]["email"]) 
		auth_key = Encryption.encrypt_auth_key("#{email}&#{Time.now.to_i.to_s}")
		set_session(:auth_key, auth_key) 
		User.set_auth_key(email, auth_key)
	end
	
end
