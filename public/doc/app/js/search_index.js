var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","boolinput","cache","charge","component","constrain","document","encryption","errorenum","fileinput","filter","group","groupscontroller","groupshelper","homecontroller","homehelper","inputelement","myjob","node","pagination","paragraph","publication","question","railsenv","registrationscontroller","registrationshelper","sessionscontroller","sessionshelper","survey","surveyscontroller","surveyshelper","textinput","tool","tree","serializer","user","userinformation","usermailer","userscontroller","usershelper","welcomecontroller","welcomehelper","activate()","activate()","activate_email()","add_attr()","add_constrain()","charges()","check_and_create_new()","check_and_create_new()","check_and_create_new()","client_ip()","clone()","clone()","clone_survey()","components()","create()","create()","create()","create_document()","create_group()","current_user()","decrypt_activate_key()","delete()","delete()","delete()","delete()","deserailize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","destroy()","destroy()","destroy()","destroy_group()","destroy_survey()","email_illegal()","email_illegal?()","encrypt_activate_key()","encrypt_auth_key()","encrypt_password()","find_by_email()","find_by_id()","find_by_id()","find_by_id()","find_by_owner_email_and_name()","forget_password()","get_auth_key()","get_node()","get_rails_env()","get_session()","groups()","has_attr?()","index()","index()","index()","index()","index()","input_activate_email()","input_new_password()","insert_exist_child_node()","insert_exist_node_after()","insert_exist_node_before()","insert_new_child_input()","insert_new_child_internal()","insert_new_child_text()","login()","new()","new()","new()","new_password()","password_email()","perform()","questions()","read()","remove_constrain()","remove_document()","remove_document()","remove_node()","require_sign_in()","require_sign_out()","reset_password()","reset_password()","reset_password()","save_meta_data()","save_meta_data()","save_meta_data()","send_activate_email()","send_password_email()","serailize()","serialize()","serialize()","serialize()","serialize()","serialize()","set_attr()","set_attr()","set_auth_key()","set_constrain_condition()","set_constrain_result()","set_login_session()","set_session()","show()","show()","show_group()","surveys()","update()","update()","update()","update_document()","update_document()","update_group()","update_information()","update_information()","user_activate?()","user_exist?()","user_information_exist?()","user_signed_in?()","user_signed_out?()","welcome_email()","write()","readme_for_app"],"longSearchIndex":["applicationcontroller","applicationhelper","boolinput","cache","charge","component","constrain","document","encryption","errorenum","fileinput","filter","group","groupscontroller","groupshelper","homecontroller","homehelper","inputelement","myjob","node","pagination","paragraph","publication","question","railsenv","registrationscontroller","registrationshelper","sessionscontroller","sessionshelper","survey","surveyscontroller","surveyshelper","textinput","tool","tree","tree::serializer","user","userinformation","usermailer","userscontroller","usershelper","welcomecontroller","welcomehelper","registrationscontroller#activate()","user::activate()","usermailer#activate_email()","tree#add_attr()","tree#add_constrain()","user#charges()","group::check_and_create_new()","user::check_and_create_new()","userinformation::check_and_create_new()","applicationcontroller#client_ip()","survey::clone()","surveyscontroller#clone()","user#clone_survey()","survey#components()","groupscontroller#create()","registrationscontroller#create()","sessionscontroller#create()","document::create_document()","user#create_group()","applicationcontroller#current_user()","encryption::decrypt_activate_key()","component::delete()","group::delete()","paragraph::delete()","survey::delete()","constrain::deserailize()","boolinput#deserialize()","fileinput#deserialize()","node::deserialize()","node#deserialize()","textinput#deserialize()","tree#deserialize()","tree::serializer#deserialize()","groupscontroller#destroy()","sessionscontroller#destroy()","surveyscontroller#destroy()","user#destroy_group()","user#destroy_survey()","registrationscontroller#email_illegal()","tool#email_illegal?()","encryption::encrypt_activate_key()","encryption::encrypt_auth_key()","encryption::encrypt_password()","user::find_by_email()","component::find_by_id()","document::find_by_id()","survey::find_by_id()","group::find_by_owner_email_and_name()","sessionscontroller#forget_password()","user::get_auth_key()","tree#get_node()","railsenv::get_rails_env()","applicationcontroller#get_session()","user#groups()","node::has_attr?()","groupscontroller#index()","homecontroller#index()","registrationscontroller#index()","sessionscontroller#index()","welcomecontroller#index()","registrationscontroller#input_activate_email()","sessionscontroller#input_new_password()","tree#insert_exist_child_node()","tree#insert_exist_node_after()","tree#insert_exist_node_before()","tree#insert_new_child_input()","tree#insert_new_child_internal()","tree#insert_new_child_text()","user::login()","constrain::new()","surveyscontroller#new()","tree::new()","sessionscontroller#new_password()","usermailer#password_email()","myjob::perform()","survey#questions()","cache::read()","tree#remove_constrain()","document::remove_document()","document#remove_document()","tree#remove_node()","applicationcontroller#require_sign_in()","applicationcontroller#require_sign_out()","user::reset_password()","user#reset_password()","userscontroller#reset_password()","survey::save_meta_data()","surveyscontroller#save_meta_data()","user#save_meta_data()","registrationscontroller#send_activate_email()","sessionscontroller#send_password_email()","constrain::serailize()","boolinput#serialize()","fileinput#serialize()","node#serialize()","textinput#serialize()","tree::serializer#serialize()","node#set_attr()","tree#set_attr()","user::set_auth_key()","constrain#set_constrain_condition()","constrain#set_constrain_result()","sessionscontroller#set_login_session()","applicationcontroller#set_session()","group::show()","groupscontroller#show()","user#show_group()","user#surveys()","group::update()","groupscontroller#update()","userinformation::update()","document::update_document()","document#update_document()","user#update_group()","user#update_information()","userscontroller#update_information()","user::user_activate?()","user::user_exist?()","userinformation::user_information_exist?()","applicationcontroller#user_signed_in?()","applicationcontroller#user_signed_out?()","usermailer#welcome_email()","cache::write()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["BoolInput","","BoolInput.html","",""],["Cache","","Cache.html","","<p>Provide methods for reading and writing caches\n"],["Charge","","Charge.html","",""],["Component","","Component.html","",""],["Constrain","","Constrain.html","","<p>Define the constrain class\n"],["Document","","Document.html","",""],["Encryption","","Encryption.html","",""],["ErrorEnum","","ErrorEnum.html","",""],["FileInput","","FileInput.html","",""],["Filter","","Filter.html","",""],["Group","","Group.html","",""],["GroupsController","","GroupsController.html","",""],["GroupsHelper","","GroupsHelper.html","",""],["HomeController","","HomeController.html","",""],["HomeHelper","","HomeHelper.html","",""],["InputElement","","InputElement.html","",""],["MyJob","","MyJob.html","",""],["Node","","Node.html","",""],["Pagination","","Pagination.html","",""],["Paragraph","","Paragraph.html","",""],["Publication","","Publication.html","",""],["Question","","Question.html","",""],["RailsEnv","","RailsEnv.html","",""],["RegistrationsController","","RegistrationsController.html","","<p>encoding: utf-8\n"],["RegistrationsHelper","","RegistrationsHelper.html","",""],["SessionsController","","SessionsController.html","",""],["SessionsHelper","","SessionsHelper.html","",""],["Survey","","Survey.html","",""],["SurveysController","","SurveysController.html","",""],["SurveysHelper","","SurveysHelper.html","",""],["TextInput","","TextInput.html","",""],["Tool","","Tool.html","",""],["Tree","","Tree.html","",""],["Tree::Serializer","","Tree/Serializer.html","","<p>used to serialize and deseralize between the Tree object and the data\nstored in mongodb\n"],["User","","User.html","","<p>Corresponding to the User collection in database. Record the user\ninformation and activities related …\n"],["UserInformation","","UserInformation.html","",""],["UserMailer","","UserMailer.html","",""],["UsersController","","UsersController.html","",""],["UsersHelper","","UsersHelper.html","",""],["WelcomeController","","WelcomeController.html","",""],["WelcomeHelper","","WelcomeHelper.html","",""],["activate","RegistrationsController","RegistrationsController.html#method-i-activate","()","<p>method: get description: user click activate link\n"],["activate","User","User.html#method-c-activate","(activate_info)","<p>Activate a user\n"],["activate_email","UserMailer","UserMailer.html#method-i-activate_email","(user)",""],["add_attr","Tree","Tree.html#method-i-add_attr","(node_id, attr)",""],["add_constrain","Tree","Tree.html#method-i-add_constrain","(node_id, constrain)",""],["charges","User","User.html#method-i-charges","()","<p>Obtain the charges of this user\n"],["check_and_create_new","Group","Group.html#method-c-check_and_create_new","(owner_email, name, description, members)","<p>create a new group, the parameter is a hash\n"],["check_and_create_new","User","User.html#method-c-check_and_create_new","(user)","<p>Create a new user\n"],["check_and_create_new","UserInformation","UserInformation.html#method-c-check_and_create_new","(user_information)","<p>check and create\n"],["client_ip","ApplicationController","ApplicationController.html#method-i-client_ip","()",""],["clone","Survey","Survey.html#method-c-clone","(owner_email, survey_id)",""],["clone","SurveysController","SurveysController.html#method-i-clone","()","<p>method: get description: clone a survey\n"],["clone_survey","User","User.html#method-i-clone_survey","(survey_id)",""],["components","Survey","Survey.html#method-i-components","()",""],["create","GroupsController","GroupsController.html#method-i-create","()","<p>method: post desciption: create a new group\n"],["create","RegistrationsController","RegistrationsController.html#method-i-create","()","<p><strong>descryption</strong>: user submit registration form\n<p><strong>http</strong> <strong>method</strong>: post\n<p><strong>url</strong>: /registrations\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>method: post descryption: user submits the login form\n"],["create_document","Document","Document.html#method-c-create_document","(owner_email, doc_type, attr)","<p>create document given meta data\n"],["create_group","User","User.html#method-i-create_group","(name, description, members)","<p>Create a new group for this user\n"],["current_user","ApplicationController","ApplicationController.html#method-i-current_user","()",""],["decrypt_activate_key","Encryption","Encryption.html#method-c-decrypt_activate_key","(string)",""],["delete","Component","Component.html#method-c-delete","(component_id)",""],["delete","Group","Group.html#method-c-delete","(owner_email, name)","<p>destroy a group\n"],["delete","Paragraph","Paragraph.html#method-c-delete","(paragraph_id)",""],["delete","Survey","Survey.html#method-c-delete","(owner_email, survey_id)",""],["deserailize","Constrain","Constrain.html#method-c-deserailize","(object)","<p>deserialize a hash into constrain object\n"],["deserialize","BoolInput","BoolInput.html#method-i-deserialize","(object)",""],["deserialize","FileInput","FileInput.html#method-i-deserialize","(object)",""],["deserialize","Node","Node.html#method-c-deserialize","(object)","<p>deserialize a node object into a input element instance\n"],["deserialize","Node","Node.html#method-i-deserialize","(object, attr_name_arr)","<p>deserialize a hash of attributes into the attributes of the current\ninstance\n"],["deserialize","TextInput","TextInput.html#method-i-deserialize","(object)",""],["deserialize","Tree","Tree.html#method-i-deserialize","(object)","<p>DESERIALIZE METHODs ##############\n"],["deserialize","Tree::Serializer","Tree/Serializer.html#method-i-deserialize","(object)",""],["destroy","GroupsController","GroupsController.html#method-i-destroy","()","<p>method: delete description: remove a group\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>method: delete description: user clicks the logout link\n"],["destroy","SurveysController","SurveysController.html#method-i-destroy","()","<p>method: delete description: destroy a survey\n"],["destroy_group","User","User.html#method-i-destroy_group","(name)","<p>Destroy a group for this user\n"],["destroy_survey","User","User.html#method-i-destroy_survey","(survey_id)",""],["email_illegal","RegistrationsController","RegistrationsController.html#method-i-email_illegal","()","<p>method: get or post description: check whether email is illegal\n"],["email_illegal?","Tool","Tool.html#method-i-email_illegal-3F","(email)",""],["encrypt_activate_key","Encryption","Encryption.html#method-c-encrypt_activate_key","(string)",""],["encrypt_auth_key","Encryption","Encryption.html#method-c-encrypt_auth_key","(string)",""],["encrypt_password","Encryption","Encryption.html#method-c-encrypt_password","(string)",""],["find_by_email","User","User.html#method-c-find_by_email","(email)","<p>Find a user given an email\n"],["find_by_id","Component","Component.html#method-c-find_by_id","(component_id)",""],["find_by_id","Document","Document.html#method-c-find_by_id","(document_id)","<p>obtain document instance given its id\n"],["find_by_id","Survey","Survey.html#method-c-find_by_id","(survey_id)",""],["find_by_owner_email_and_name","Group","Group.html#method-c-find_by_owner_email_and_name","(owner_email, name)","<p>find a group by the owner email and the group name\n"],["forget_password","SessionsController","SessionsController.html#method-i-forget_password","()","<p>method: get descryption: the page where user inputs the email to reset\npassword\n"],["get_auth_key","User","User.html#method-c-get_auth_key","(email)",""],["get_node","Tree","Tree.html#method-i-get_node","(node_id)","<p>READ METHODs ##############\n"],["get_rails_env","RailsEnv","RailsEnv.html#method-c-get_rails_env","(env=nil)","<p>If no parameters are given, return the current environment; else return\nboolean value to indicate whether …\n"],["get_session","ApplicationController","ApplicationController.html#method-i-get_session","(key)",""],["groups","User","User.html#method-i-groups","()","<p>obtain the groups of this user\n"],["has_attr?","Node","Node.html#method-c-has_attr-3F","(attr_name)",""],["index","GroupsController","GroupsController.html#method-i-index","()","<p>method: get desciption: get all groups of one user\n"],["index","HomeController","HomeController.html#method-i-index","()","<p>method: get description: the home page of an user\n"],["index","RegistrationsController","RegistrationsController.html#method-i-index","()","<p>method: get descryption: the page where user inputs the registration form\n"],["index","SessionsController","SessionsController.html#method-i-index","()","<p>method: get descryption: the page where user logins\n"],["index","WelcomeController","WelcomeController.html#method-i-index","()",""],["input_activate_email","RegistrationsController","RegistrationsController.html#method-i-input_activate_email","()","<p>method: get descryption: show the page where user can input the email for\nactivating\n"],["input_new_password","SessionsController","SessionsController.html#method-i-input_new_password","()","<p>method: get descryption: user clicks the reset password link to input new\npassword\n"],["insert_exist_child_node","Tree","Tree.html#method-i-insert_exist_child_node","(parent_id, child_index, tree, node_id)",""],["insert_exist_node_after","Tree","Tree.html#method-i-insert_exist_node_after","(brother_id, tree, node_id)",""],["insert_exist_node_before","Tree","Tree.html#method-i-insert_exist_node_before","(brother_id, tree, node_id)",""],["insert_new_child_input","Tree","Tree.html#method-i-insert_new_child_input","(parent_id, child_index, input)",""],["insert_new_child_internal","Tree","Tree.html#method-i-insert_new_child_internal","(parent_id, child_index, node)",""],["insert_new_child_text","Tree","Tree.html#method-i-insert_new_child_text","(parent_id, child_index, text)",""],["login","User","User.html#method-c-login","(email, password, client_ip)","<p>User login: check whether email and password matches\n"],["new","Constrain","Constrain.html#method-c-new","()","<p>initialize a constrain instance, generate its constrain_id\n"],["new","SurveysController","SurveysController.html#method-i-new","()","<p>method: get description: create a new empty survey\n"],["new","Tree","Tree.html#method-c-new","(*args)","<p>Tree instance can be initialized either as an empty tree or as a tree with\nnodes\n"],["new_password","SessionsController","SessionsController.html#method-i-new_password","()","<p>method: post descryption: user submits the new password\n"],["password_email","UserMailer","UserMailer.html#method-i-password_email","(user)",""],["perform","MyJob","MyJob.html#method-c-perform","()",""],["questions","Survey","Survey.html#method-i-questions","()",""],["read","Cache","Cache.html#method-c-read","(key)","<p>Read from cache\n"],["remove_constrain","Tree","Tree.html#method-i-remove_constrain","(node_id, constrain_id)",""],["remove_document","Document","Document.html#method-c-remove_document","(document_id)",""],["remove_document","Document","Document.html#method-i-remove_document","()","<p>destroy a document given its id\n"],["remove_node","Tree","Tree.html#method-i-remove_node","(node_id)","<p>DELETE METHODs ##############\n"],["require_sign_in","ApplicationController","ApplicationController.html#method-i-require_sign_in","()",""],["require_sign_out","ApplicationController","ApplicationController.html#method-i-require_sign_out","()",""],["reset_password","User","User.html#method-c-reset_password","(email, new_password)","<p>Reset password: forget password\n"],["reset_password","User","User.html#method-i-reset_password","(old_password, new_password)","<p>Reset password: reset password\n"],["reset_password","UsersController","UsersController.html#method-i-reset_password","()","<p>method: post descryption: user resets the new password\n"],["save_meta_data","Survey","Survey.html#method-c-save_meta_data","(email, survey)",""],["save_meta_data","SurveysController","SurveysController.html#method-i-save_meta_data","()","<p>method: post description: save meta data for a survey\n"],["save_meta_data","User","User.html#method-i-save_meta_data","(survey)",""],["send_activate_email","RegistrationsController","RegistrationsController.html#method-i-send_activate_email","()","<p>method: post descryption: user submit “input activate email” form\n"],["send_password_email","SessionsController","SessionsController.html#method-i-send_password_email","()","<p>method: post descryption: user submits the email to reset password\n"],["serailize","Constrain","Constrain.html#method-c-serailize","(object)","<p>serialize a constrain object into a hash\n"],["serialize","BoolInput","BoolInput.html#method-i-serialize","()",""],["serialize","FileInput","FileInput.html#method-i-serialize","()",""],["serialize","Node","Node.html#method-i-serialize","(attr_name_arr)","<p>serialize the input element instance into a hash of attributes\n"],["serialize","TextInput","TextInput.html#method-i-serialize","()",""],["serialize","Tree::Serializer","Tree/Serializer.html#method-i-serialize","(object)",""],["set_attr","Node","Node.html#method-i-set_attr","(attr_hash = {})",""],["set_attr","Tree","Tree.html#method-i-set_attr","(node_id, attr)","<p>UPDATE METHODs ##############\n"],["set_auth_key","User","User.html#method-c-set_auth_key","(email, auth_key)","<p>Set and get auth_key for user\n"],["set_constrain_condition","Constrain","Constrain.html#method-i-set_constrain_condition","(condition)","<p>set conditions for a constrain instance, the condition must be string\n"],["set_constrain_result","Constrain","Constrain.html#method-i-set_constrain_result","(result_attr)","<p>set result for a constrain instance, the result must be a hash, the keys of\nwhich be included in RESULT_ATTR_ARRAY …\n"],["set_login_session","SessionsController","SessionsController.html#method-i-set_login_session","(email)","<p>method: in-accessible description: help set session for an email account\n"],["set_session","ApplicationController","ApplicationController.html#method-i-set_session","(key, value, expire = nil)",""],["show","Group","Group.html#method-c-show","(owner_email, name)","<p>show a group\n"],["show","GroupsController","GroupsController.html#method-i-show","()","<p>method: get description: show a group\n"],["show_group","User","User.html#method-i-show_group","(name)","<p>Show a group for this user\n"],["surveys","User","User.html#method-i-surveys","()","<p>Obtain the surveys of this user\n"],["update","Group","Group.html#method-c-update","(owner_email, name, new_name, description, members)","<p>update a group\n"],["update","GroupsController","GroupsController.html#method-i-update","()","<p>method: put description: update a group\n"],["update","UserInformation","UserInformation.html#method-c-update","(user_information)","<p>update a user information\n"],["update_document","Document","Document.html#method-c-update_document","(document_id, attr)",""],["update_document","Document","Document.html#method-i-update_document","(attr)","<p>update a document’s attr\n"],["update_group","User","User.html#method-i-update_group","(name, new_name, description, members)","<p>Update a group for this user\n"],["update_information","User","User.html#method-i-update_information","(profile)","<p>Update the user’s profile (user information)\n"],["update_information","UsersController","UsersController.html#method-i-update_information","()","<p>method: post description: update profile of a signed in user\n"],["user_activate?","User","User.html#method-c-user_activate-3F","(email)","<p>Check whether an user has activated\n"],["user_exist?","User","User.html#method-c-user_exist-3F","(email)","<p>Check whether an email has been registered as an user\n"],["user_information_exist?","UserInformation","UserInformation.html#method-c-user_information_exist-3F","(email)","<p>check whether user_information for one email exists\n"],["user_signed_in?","ApplicationController","ApplicationController.html#method-i-user_signed_in-3F","()",""],["user_signed_out?","ApplicationController","ApplicationController.html#method-i-user_signed_out-3F","()",""],["welcome_email","UserMailer","UserMailer.html#method-i-welcome_email","(user)",""],["write","Cache","Cache.html#method-c-write","(key, value, opt = {})","<p>Write to cache. The expiration time can be set by passing parameters, as\nfollows:\n\n<pre>Cache.write(&quot;key&quot;, &quot;value&quot;, ...</pre>\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}